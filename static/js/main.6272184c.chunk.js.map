{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-field/SearchField.jsx","components/sort-options/SortOptions.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","monster","react","className","alt","src","concat","id","name","email","CardList","monsters","length","style","color","map","card_Card","key","SearchField","handleSearchChange","placeholder","autoFocus","type","onChange","SortOptions","handleSort","isSortedAscending","onClick","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareNamesAscending","a","b","nameA","toLowerCase","nameB","comparison","compareNamesDescending","e","setState","searchField","target","value","_this$state","state","sortedMonsters","sort","_this2","fetch","then","res","json","users","catch","err","console","log","_this$state2","filteredMonsters","filter","search","includes","react_default","createElement","SearchField_SearchField","SortOptions_SortOptions","card_list_CardList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6272184c.chunk.js","sourcesContent":["import * as React from 'react';\nimport './card.css';\n\nexport const Card = ({ monster }) => {\n  return (\n    <div className=\"card-container\">\n      <img\n        alt=\"monster\"\n        className=\"card-img\"\n        src={`https://robohash.org/${monster.id}?set=set4`}\n      />\n      <h2>{monster.name}</h2>\n      <p>{monster.email}</p>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport './card-list.css';\nimport { Card } from '../card/card';\n\nexport const CardList = ({ monsters }) => {\n  if (monsters.length <= 0) {\n    return <h1 style={{ color: '#ff8fa0' }}>No users found :(</h1>;\n  }\n\n  return (\n    <div className=\"card-list\">\n      {monsters.map(monster => (\n        <Card monster={monster} key={monster.id} />\n      ))}\n    </div>\n  );\n};\n","import * as React from 'react';\nimport './search-field.css';\n\nexport const SearchField = ({\n  handleSearchChange,\n  placeholder,\n  autoFocus,\n  className,\n}) => {\n  return (\n    <input\n      type=\"search\"\n      className={className}\n      autoFocus={autoFocus}\n      placeholder={placeholder}\n      onChange={handleSearchChange}\n    />\n  );\n};\n","import * as React from 'react';\nimport './sort-options.css';\n\nexport const SortOptions = ({ handleSort, isSortedAscending }) => {\n  return (\n    <div className=\"sort-options\">\n      <button onClick={handleSort}>\n        {isSortedAscending ? 'Sort Ascending' : 'Sort Descending'}\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list';\nimport { SearchField } from './components/search-field/SearchField';\nimport { SortOptions } from './components/sort-options/SortOptions';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: '',\n      isSortedAscending: false,\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users => this.setState({ monsters: users }))\n      .catch(err => console.log(err));\n  }\n\n  compareNamesAscending = (a, b) => {\n    const nameA = a.name.toLowerCase();\n    const nameB = b.name.toLowerCase();\n\n    let comparison = 0;\n    if (nameA > nameB) {\n      comparison = 1;\n    } else if (nameA < nameB) {\n      comparison = -1;\n    }\n    return comparison;\n  };\n\n  compareNamesDescending = (a, b) => {\n    const nameA = a.name.toLowerCase();\n    const nameB = b.name.toLowerCase();\n\n    let comparison = 0;\n    if (nameA < nameB) {\n      comparison = 1;\n    } else if (nameA > nameB) {\n      comparison = -1;\n    }\n    return comparison;\n  };\n\n  onChange = e => this.setState({ searchField: e.target.value });\n\n  handleSort = e => {\n    const { monsters, isSortedAscending } = this.state;\n    if (!isSortedAscending) {\n      const sortedMonsters = monsters.sort(this.compareNamesAscending);\n      this.setState({ monsters: sortedMonsters, isSortedAscending: true });\n    } else {\n      const sortedMonsters = monsters.sort(this.compareNamesDescending);\n      this.setState({ monsters: sortedMonsters, isSortedAscending: false });\n    }\n  };\n\n  render() {\n    const { monsters, searchField, isSortedAscending } = this.state;\n\n    const filteredMonsters = monsters.filter(monster => {\n      const name = monster.name.toLowerCase();\n      const email = monster.email.toLowerCase();\n      const search = searchField.toLowerCase();\n      return name.includes(search) || email.includes(search);\n    });\n\n    return (\n      <div className=\"App\">\n        <h1>Kitty Rolodex</h1>\n        <SearchField\n          handleSearchChange={this.onChange}\n          placeholder=\"Search users...\"\n          autoFocus={true}\n          className=\"search-field\"\n        />\n        {filteredMonsters.length >= 1 && (\n          <SortOptions\n            handleSort={this.handleSort}\n            isSortedAscending={isSortedAscending}\n          />\n        )}\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}